{
	"info": {
		"_postman_id": "e8a9b5f7-5c3d-4b5e-9a8f-3f5d7c8e9d2a",
		"name": "OptiFit API Tests",
		"description": "Collection for testing the OptiFit API, including authentication between microservices.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth (User Service)",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Registration successful\", function() {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"access_token\", jsonData.accessToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"Password123!\"\n}"
						},
						"url": {
							"raw": "{{base_url_user_service}}/auth/register",
							"host": [
								"{{base_url_user_service}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Register a new user in the system."
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function() {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"access_token\", jsonData.accessToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"Password123!\"\n}"
						},
						"url": {
							"raw": "{{base_url_user_service}}/auth/login",
							"host": [
								"{{base_url_user_service}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Login with existing user credentials."
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for the user service."
		},
		{
			"name": "Food Logs",
			"item": [
				{
					"name": "Create Food Log",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Food log created\", function() {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"food_log_id\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"foodName\": \"Grilled Chicken Breast\",\n    \"amount\": 100,\n    \"unit\": \"g\",\n    \"calories\": 165,\n    \"protein\": 31,\n    \"carbs\": 0,\n    \"fat\": 3.6,\n    \"time\": \"2025-03-11T12:00:00Z\"\n}"
						},
						"url": {
							"raw": "{{base_url_logging_service}}/food/logs",
							"host": [
								"{{base_url_logging_service}}"
							],
							"path": [
								"food",
								"logs"
							]
						},
						"description": "Create a new food log entry."
					},
					"response": []
				},
				{
					"name": "Get All Food Logs",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_logging_service}}/food/logs?startDate=2025-03-01T00:00:00Z&endDate=2025-03-31T23:59:59Z&limit=10&offset=0",
							"host": [
								"{{base_url_logging_service}}"
							],
							"path": [
								"food",
								"logs"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2025-03-01T00:00:00Z",
									"description": "Optional: Filter logs from this date"
								},
								{
									"key": "endDate",
									"value": "2025-03-31T23:59:59Z",
									"description": "Optional: Filter logs until this date"
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Optional: Limit the number of results"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Optional: Offset for pagination"
								}
							]
						},
						"description": "Get all food logs for the authenticated user with optional filtering."
					},
					"response": []
				},
				{
					"name": "Get Food Log by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_logging_service}}/food/logs/{{food_log_id}}",
							"host": [
								"{{base_url_logging_service}}"
							],
							"path": [
								"food",
								"logs",
								"{{food_log_id}}"
							]
						},
						"description": "Get a specific food log by its ID."
					},
					"response": []
				},
				{
					"name": "Update Food Log (Without Time)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"calories\": 180,\n    \"protein\": 32,\n    \"amount\": 110\n}"
						},
						"url": {
							"raw": "{{base_url_logging_service}}/food/logs/{{food_log_id}}",
							"host": [
								"{{base_url_logging_service}}"
							],
							"path": [
								"food",
								"logs",
								"{{food_log_id}}"
							]
						},
						"description": "Update an existing food log without changing the time field. This is more efficient as it doesn't require deleting and recreating the record."
					},
					"response": []
				},
				{
					"name": "Update Food Log (With Time)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"calories\": 180,\n    \"protein\": 32,\n    \"amount\": 110,\n    \"time\": \"2025-03-11T14:00:00Z\"\n}"
						},
						"url": {
							"raw": "{{base_url_logging_service}}/food/logs/{{food_log_id}}",
							"host": [
								"{{base_url_logging_service}}"
							],
							"path": [
								"food",
								"logs",
								"{{food_log_id}}"
							]
						},
						"description": "Update an existing food log including the time field. This requires deleting and recreating the record since time is part of the primary key."
					},
					"response": []
				},
				{
					"name": "Delete Food Log",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Food log deleted\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url_logging_service}}/food/logs/{{food_log_id}}",
							"host": [
								"{{base_url_logging_service}}"
							],
							"path": [
								"food",
								"logs",
								"{{food_log_id}}"
							]
						},
						"description": "Delete a food log by its ID."
					},
					"response": []
				}
			],
			"description": "Endpoints for managing food logs."
		},
		{
			"name": "Exercise Logs",
			"item": [
				{
					"name": "Create Exercise Log",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Exercise log created\", function() {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"exercise_log_id\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Running\",\n    \"type\": \"Cardio\",\n    \"duration\": 30,\n    \"intensity\": \"Moderate\",\n    \"calories\": 300,\n    \"time\": \"2025-03-11T18:00:00Z\"\n}"
						},
						"url": {
							"raw": "{{base_url_logging_service}}/exercise/logs",
							"host": [
								"{{base_url_logging_service}}"
							],
							"path": [
								"exercise",
								"logs"
							]
						},
						"description": "Create a new exercise log entry."
					},
					"response": []
				},
				{
					"name": "Get All Exercise Logs",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_logging_service}}/exercise/logs?startDate=2025-03-01T00:00:00Z&endDate=2025-03-31T23:59:59Z&limit=10&offset=0",
							"host": [
								"{{base_url_logging_service}}"
							],
							"path": [
								"exercise",
								"logs"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2025-03-01T00:00:00Z",
									"description": "Optional: Filter logs from this date"
								},
								{
									"key": "endDate",
									"value": "2025-03-31T23:59:59Z",
									"description": "Optional: Filter logs until this date"
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Optional: Limit the number of results"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Optional: Offset for pagination"
								}
							]
						},
						"description": "Get all exercise logs for the authenticated user with optional filtering."
					},
					"response": []
				},
				{
					"name": "Get Exercise Log by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_logging_service}}/exercise/logs/{{exercise_log_id}}",
							"host": [
								"{{base_url_logging_service}}"
							],
							"path": [
								"exercise",
								"logs",
								"{{exercise_log_id}}"
							]
						},
						"description": "Get a specific exercise log by its ID."
					},
					"response": []
				},
				{
					"name": "Update Exercise Log (Without Time)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"duration\": 45,\n    \"calories\": 450,\n    \"intensity\": \"High\"\n}"
						},
						"url": {
							"raw": "{{base_url_logging_service}}/exercise/logs/{{exercise_log_id}}",
							"host": [
								"{{base_url_logging_service}}"
							],
							"path": [
								"exercise",
								"logs",
								"{{exercise_log_id}}"
							]
						},
						"description": "Update an existing exercise log without changing the time field. This is more efficient as it doesn't require deleting and recreating the record."
					},
					"response": []
				},
				{
					"name": "Update Exercise Log (With Time)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"duration\": 45,\n    \"calories\": 450,\n    \"intensity\": \"High\",\n    \"time\": \"2025-03-11T19:00:00Z\"\n}"
						},
						"url": {
							"raw": "{{base_url_logging_service}}/exercise/logs/{{exercise_log_id}}",
							"host": [
								"{{base_url_logging_service}}"
							],
							"path": [
								"exercise",
								"logs",
								"{{exercise_log_id}}"
							]
						},
						"description": "Update an existing exercise log including the time field. This requires deleting and recreating the record since time is part of the primary key."
					},
					"response": []
				},
				{
					"name": "Delete Exercise Log",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Exercise log deleted\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url_logging_service}}/exercise/logs/{{exercise_log_id}}",
							"host": [
								"{{base_url_logging_service}}"
							],
							"path": [
								"exercise",
								"logs",
								"{{exercise_log_id}}"
							]
						},
						"description": "Delete an exercise log by its ID."
					},
					"response": []
				}
			],
			"description": "Endpoints for managing exercise logs."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url_user_service",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "base_url_logging_service",
			"value": "http://localhost:3001",
			"type": "string"
		}
	]
}
